// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserDto = {
    /**
     * The username for the new user
     */
    username: string;
    /**
     * The email address for the new user
     */
    email: string;
    /**
     * The password for the new user
     */
    password: string;
    /**
     * The authentication strategy to use
     */
    strategy: 'local_password' | 'sso';
};

/**
 * The authentication strategy to use
 */
export enum strategy {
    LOCAL_PASSWORD = 'local_password',
    SSO = 'sso'
}

export type SystemPermissions = {
    /**
     * Whether the user can manage resources
     */
    canManageResources: boolean;
    /**
     * Whether the user can manage system configuration
     */
    canManageSystemConfiguration: boolean;
    /**
     * Whether the user can manage users
     */
    canManageUsers: boolean;
};

export type User = {
    /**
     * The unique identifier of the user
     */
    id: number;
    /**
     * The username of the user
     */
    username: string;
    /**
     * Whether the user has verified their email address
     */
    isEmailVerified: boolean;
    /**
     * System-wide permissions for the user
     */
    systemPermissions: SystemPermissions;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
    /**
     * The external (origin) identifier of the user, if the user is authenticated via SSO
     */
    externalIdentifier?: string | null;
};

export type VerifyEmailDto = {
    /**
     * The token to verify the email
     */
    token: string;
    /**
     * The email to verify
     */
    email: string;
};

export type ResetPasswordDto = {
    [key: string]: unknown;
};

export type ChangePasswordDto = {
    /**
     * The new password for the user
     */
    password: string;
    /**
     * The token for the user
     */
    token: string;
};

export type ChangeUsernameDto = {
    /**
     * The new username
     */
    username: string;
};

export type UserNotFoundException = {
    [key: string]: unknown;
};

export type PaginatedUsersResponseDto = {
    total: number;
    page: number;
    limit: number;
    data: Array<User>;
};

export type UpdateUserPermissionsDto = {
    /**
     * Whether the user can manage resources
     */
    canManageResources?: boolean;
    /**
     * Whether the user can manage system configuration
     */
    canManageSystemConfiguration?: boolean;
    /**
     * Whether the user can manage users
     */
    canManageUsers?: boolean;
};

export type UserPermissionsUpdateItem = {
    /**
     * The user ID
     */
    userId: number;
    /**
     * The permission updates to apply
     */
    permissions: UpdateUserPermissionsDto;
};

export type BulkUpdateUserPermissionsDto = {
    /**
     * Array of user permission updates
     */
    updates: Array<UserPermissionsUpdateItem>;
};

export type SetUserPasswordDto = {
    /**
     * The new password for the user
     */
    password: string;
};

export type CreateSessionResponse = {
    /**
     * The user that has been logged in
     */
    user: User;
    /**
     * The authentication token
     */
    authToken: string;
};

/**
 * The type of the provider
 */
export enum SSOProviderType {
    OIDC = 'OIDC'
}

export type SSOProviderOIDCConfiguration = {
    /**
     * The unique identifier of the provider
     */
    id: number;
    /**
     * The ID of the SSO provider
     */
    ssoProviderId: number;
    /**
     * The issuer of the provider
     */
    issuer: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL: string;
    /**
     * The token URL of the provider
     */
    tokenURL: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL: string;
    /**
     * The client ID of the provider
     */
    clientId: string;
    /**
     * The client secret of the provider
     */
    clientSecret: string;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
};

export type SSOProvider = {
    /**
     * The unique identifier of the provider
     */
    id: number;
    /**
     * The internal name of the provider
     */
    name: string;
    /**
     * The type of the provider
     */
    type: SSOProviderType;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
    /**
     * The OIDC configuration of the provider
     */
    oidcConfiguration: SSOProviderOIDCConfiguration;
};

export type LinkUserToExternalAccountRequestDto = {
    /**
     * The email of the user
     */
    email: string;
    /**
     * The password of the user
     */
    password: string;
    /**
     * The external identifier of the user
     */
    externalId: string;
};

export type CreateOIDCConfigurationDto = {
    /**
     * The issuer of the provider
     */
    issuer: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL: string;
    /**
     * The token URL of the provider
     */
    tokenURL: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL: string;
    /**
     * The client ID of the provider
     */
    clientId: string;
    /**
     * The client secret of the provider
     */
    clientSecret: string;
};

export type CreateSSOProviderDto = {
    /**
     * The name of the SSO provider
     */
    name: string;
    /**
     * The type of SSO provider
     */
    type: 'OIDC';
    /**
     * The OIDC configuration for the provider
     */
    oidcConfiguration?: CreateOIDCConfigurationDto;
};

/**
 * The type of SSO provider
 */
export enum type {
    OIDC = 'OIDC'
}

export type UpdateOIDCConfigurationDto = {
    /**
     * The issuer of the provider
     */
    issuer?: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL?: string;
    /**
     * The token URL of the provider
     */
    tokenURL?: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL?: string;
    /**
     * The client ID of the provider
     */
    clientId?: string;
    /**
     * The client secret of the provider
     */
    clientSecret?: string;
};

export type UpdateSSOProviderDto = {
    /**
     * The name of the SSO provider
     */
    name?: string;
    /**
     * The OIDC configuration for the provider
     */
    oidcConfiguration?: UpdateOIDCConfigurationDto;
};

export type PreviewMjmlDto = {
    /**
     * The MJML content to preview
     */
    mjmlContent: string;
};

export type PreviewMjmlResponseDto = {
    /**
     * The HTML content of the MJML
     */
    html: string;
    /**
     * Indicates if there were any errors during conversion
     */
    hasErrors: boolean;
    /**
     * Error message if conversion failed
     */
    error?: string;
};

/**
 * Template type/key used by the system
 */
export enum EmailTemplateType {
    VERIFY_EMAIL = 'verify-email',
    RESET_PASSWORD = 'reset-password',
    USERNAME_CHANGED = 'username-changed',
    PASSWORD_CHANGED = 'password-changed'
}

export type EmailTemplate = {
    /**
     * Template type/key used by the system
     */
    type: EmailTemplateType;
    /**
     * Email subject line
     */
    subject: string;
    /**
     * MJML content of the email body
     */
    body: string;
    /**
     * Variables used in the email body
     */
    variables: Array<(string)>;
    /**
     * Timestamp of when the template was created
     */
    createdAt: string;
    /**
     * Timestamp of when the template was last updated
     */
    updatedAt: string;
};

export type UpdateEmailTemplateDto = {
    /**
     * Email subject line
     */
    subject?: string;
    /**
     * MJML content of the email body
     */
    body?: string;
};

export type LicenseDataDto = {
    /**
     * Whether the license is valid
     */
    valid: boolean;
    /**
     * Reason for invalidity when not valid
     */
    reason?: string;
    /**
     * The raw payload as returned by the license server
     */
    modules: Array<(string)>;
    /**
     * The raw payload as returned by the license server
     */
    usageLimits: {
        [key: string]: unknown;
    };
    /**
     * Are you using this software for free as a non-profit?
     */
    isNonProfit: boolean;
};

export type CreateResourceDto = {
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * Resource image file
     */
    image?: (Blob | File);
    /**
     * The type of documentation (markdown or url)
     */
    documentationType?: 'markdown' | 'url';
    /**
     * Markdown content for resource documentation
     */
    documentationMarkdown?: string;
    /**
     * URL to external documentation
     */
    documentationUrl?: string;
    /**
     * Whether this resource allows overtaking by the next user without the prior user ending their session
     */
    allowTakeOver?: boolean;
};

/**
 * The type of documentation (markdown or url)
 */
export enum documentationType {
    MARKDOWN = 'markdown',
    URL = 'url'
}

export type ResourceGroup = {
    /**
     * The unique identifier of the resource group
     */
    id: number;
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * When the resource was created
     */
    createdAt: string;
    /**
     * When the resource was last updated
     */
    updatedAt: string;
};

export type Resource = {
    /**
     * The unique identifier of the resource
     */
    id: number;
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * The filename of the resource image
     */
    imageFilename?: string;
    /**
     * The type of documentation (markdown or url)
     */
    documentationType?: 'markdown' | 'url';
    /**
     * Markdown content for resource documentation
     */
    documentationMarkdown?: string;
    /**
     * URL to external documentation
     */
    documentationUrl?: string;
    /**
     * Whether this resource allows overtaking by the next user without the prior user ending their session
     */
    allowTakeOver: boolean;
    /**
     * When the resource was created
     */
    createdAt: string;
    /**
     * When the resource was last updated
     */
    updatedAt: string;
    /**
     * The groups the resource belongs to
     */
    groups: Array<ResourceGroup>;
};

export type PaginatedResourceResponseDto = {
    total: number;
    page: number;
    limit: number;
    data: Array<Resource>;
};

export type UpdateResourceDto = {
    /**
     * The name of the resource
     */
    name?: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * New resource image file
     */
    image?: (Blob | File);
    /**
     * Whether the resource image should be deleted
     */
    deleteImage?: boolean;
    /**
     * The type of documentation (markdown or url)
     */
    documentationType?: 'markdown' | 'url';
    /**
     * Markdown content for resource documentation
     */
    documentationMarkdown?: string;
    /**
     * URL to external documentation
     */
    documentationUrl?: string;
    /**
     * Whether this resource allows overtaking by the next user without the prior user ending their session
     */
    allowTakeOver?: boolean;
};

export type MqttServer = {
    /**
     * The unique identifier of the MQTT server
     */
    id: number;
    /**
     * Friendly name for the MQTT server
     */
    name: string;
    /**
     * MQTT server hostname/IP
     */
    host: string;
    /**
     * MQTT server port (default: 1883 for MQTT, 8883 for MQTTS)
     */
    port: number;
    /**
     * Optional authentication username
     */
    username?: string;
    /**
     * Optional authentication password
     */
    password?: string;
    /**
     * Client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL
     */
    useTls: boolean;
    /**
     * When the MQTT server was created
     */
    createdAt: string;
    /**
     * When the MQTT server was last updated
     */
    updatedAt: string;
};

export type CreateMqttServerDto = {
    /**
     * Friendly name for the MQTT server
     */
    name: string;
    /**
     * Hostname or IP address of the MQTT server
     */
    host: string;
    /**
     * Port number of the MQTT server
     */
    port: number;
    /**
     * Optional username for authentication
     */
    username?: string;
    /**
     * Optional password for authentication
     */
    password?: string;
    /**
     * Optional client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL for the connection
     */
    useTls?: boolean;
};

export type UpdateMqttServerDto = {
    /**
     * Friendly name for the MQTT server
     */
    name?: string;
    /**
     * Hostname or IP address of the MQTT server
     */
    host?: string;
    /**
     * Port number of the MQTT server
     */
    port?: number;
    /**
     * Optional username for authentication
     */
    username?: string;
    /**
     * Optional password for authentication
     */
    password?: string;
    /**
     * Optional client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL for the connection
     */
    useTls?: boolean;
};

export type TestConnectionResponseDto = {
    /**
     * Whether the connection test was successful
     */
    success: boolean;
    /**
     * Message describing the test result
     */
    message: string;
};

export type MqttHealthStatusDto = {
    /**
     * Whether the connection is healthy
     */
    healthy: boolean;
    /**
     * Detailed health status message
     */
    details: string;
};

export type MqttConnectionStatsDto = {
    /**
     * Number of connection attempts
     */
    connectionAttempts: number;
    /**
     * Number of failed connections
     */
    connectionFailures: number;
    /**
     * Number of successful connections
     */
    connectionSuccesses: number;
    /**
     * Timestamp of last successful connection
     */
    lastConnectTime?: string;
    /**
     * Timestamp of last disconnection
     */
    lastDisconnectTime?: string;
};

export type MqttMessageStatsDto = {
    /**
     * Number of successfully published messages
     */
    published: number;
    /**
     * Number of failed message publications
     */
    failed: number;
    /**
     * Timestamp of last successful message publication
     */
    lastPublishTime?: string;
    /**
     * Timestamp of last failed message publication
     */
    lastFailureTime?: string;
};

export type MqttServerStatsDto = {
    /**
     * Connection statistics
     */
    connection: MqttConnectionStatsDto;
    /**
     * Message statistics
     */
    messages: MqttMessageStatsDto;
};

export type MqttServerStatusDto = {
    /**
     * Whether the server is currently connected
     */
    connected: boolean;
    /**
     * Health status of the connection
     */
    healthStatus: MqttHealthStatusDto;
    /**
     * Detailed statistics
     */
    stats: MqttServerStatsDto;
};

export type AllMqttServerStatusesDto = {
    /**
     * Map of server IDs to their statuses
     */
    servers: {
        [key: string]: MqttServerStatusDto;
    };
};

export type CreateResourceGroupDto = {
    /**
     * The name of the resource group
     */
    name: string;
    /**
     * The description of the resource group
     */
    description?: string;
};

export type UpdateResourceGroupDto = {
    /**
     * The name of the resource group
     */
    name: string;
    /**
     * The description of the resource group
     */
    description?: string;
};

export type ResourceIntroductionHistoryItem = {
    /**
     * The unique identifier of the introduction history entry
     */
    id: number;
    /**
     * The ID of the related introduction
     */
    introductionId: number;
    /**
     * The action performed (revoke or grant)
     */
    action: 'revoke' | 'grant';
    /**
     * The ID of the user who performed the action
     */
    performedByUserId: number;
    /**
     * Optional comment explaining the reason for the action
     */
    comment?: string;
    /**
     * When the action was performed
     */
    createdAt: string;
    /**
     * The user who performed the action
     */
    performedByUser: User;
};

/**
 * The action performed (revoke or grant)
 */
export enum action {
    REVOKE = 'revoke',
    GRANT = 'grant'
}

export type ResourceIntroduction = {
    /**
     * The unique identifier of the introduction
     */
    id: number;
    /**
     * The ID of the resource (if this is a resource-specific introduction)
     */
    resourceId?: number;
    /**
     * The ID of the user who received the introduction
     */
    receiverUserId: number;
    /**
     * The ID of the user who tutored the receiver
     */
    tutorUserId: number;
    /**
     * The ID of the resource group (if this is a group-level introduction)
     */
    resourceGroupId?: number;
    /**
     * When the introduction was completed
     */
    completedAt: string;
    /**
     * When the introduction record was created
     */
    createdAt: string;
    /**
     * The user who received the introduction
     */
    receiverUser: User;
    /**
     * The user who tutored the receiver
     */
    tutorUser: User;
    /**
     * History of revoke/unrevoke actions for this introduction
     */
    history: Array<ResourceIntroductionHistoryItem>;
};

export type UpdateResourceGroupIntroductionDto = {
    /**
     * The comment for the action
     */
    comment?: string;
};

export type ResourceIntroducer = {
    /**
     * The unique identifier of the introduction permission
     */
    id: number;
    /**
     * The ID of the resource (if permission is for a specific resource)
     */
    resourceId?: number;
    /**
     * The ID of the user who can give introductions
     */
    userId: number;
    /**
     * The ID of the resource group (if permission is for a group)
     */
    resourceGroupId?: number;
    /**
     * When the permission was granted
     */
    grantedAt: string;
    /**
     * The user who can give introductions
     */
    user: User;
};

export type IsResourceGroupIntroducerResponseDto = {
    /**
     * Whether the user is an introducer for the resource
     */
    isIntroducer: boolean;
};

export type StartUsageSessionDto = {
    /**
     * Optional notes about the usage session
     */
    notes?: string;
    /**
     * Whether to force takeover of an existing session (only works if resource allows takeover)
     */
    forceTakeOver?: boolean;
};

export type ResourceUsage = {
    /**
     * The unique identifier of the resource usage
     */
    id: number;
    /**
     * The ID of the resource being used
     */
    resourceId: number;
    /**
     * The ID of the user using the resource (null if user was deleted)
     */
    userId?: number;
    /**
     * When the usage session started
     */
    startTime: string;
    /**
     * Notes provided when starting the session
     */
    startNotes?: string;
    /**
     * When the usage session ended
     */
    endTime?: string;
    /**
     * Notes provided when ending the session
     */
    endNotes?: string;
    /**
     * The resource being used
     */
    resource?: Resource;
    /**
     * The user who used the resource
     */
    user?: User;
    /**
     * The duration of the usage session in minutes
     */
    usageInMinutes: number;
};

export type EndUsageSessionDto = {
    /**
     * Additional notes about the completed session
     */
    notes?: string;
    /**
     * The end time of the session. If not provided, current time will be used.
     */
    endTime?: string;
};

export type GetResourceHistoryResponseDto = {
    total: number;
    page: number;
    limit: number;
    data: Array<ResourceUsage>;
};

export type GetActiveUsageSessionDto = {
    /**
     * The active usage session or null if none exists
     */
    usage: (ResourceUsage) | null;
};

export type CanControlResponseDto = {
    /**
     * Whether the user can control the resource
     */
    canControl: boolean;
};

export type IsResourceIntroducerResponseDto = {
    /**
     * Whether the user is an introducer for the resource
     */
    isIntroducer: boolean;
};

export type UpdateResourceIntroductionDto = {
    /**
     * The comment for the action
     */
    comment?: string;
};

export type CanManageMaintenanceResponseDto = {
    /**
     * Whether the user can manage maintenance for the resource
     */
    canManage: boolean;
    /**
     * The resource ID that was checked
     */
    resourceId: number;
};

export type CreateMaintenanceDto = {
    /**
     * When the maintenance starts (must be in the future)
     */
    startTime: string;
    /**
     * When the maintenance ends (optional)
     */
    endTime?: string;
    /**
     * The reason for the maintenance
     */
    reason?: string;
};

export type ResourceMaintenance = {
    /**
     * The unique identifier of the maintenance
     */
    id: number;
    /**
     * When the maintenance was created
     */
    createdAt: string;
    /**
     * When the maintenance was last updated
     */
    updatedAt: string;
    /**
     * The ID of the resource
     */
    resourceId: number;
    /**
     * When the maintenance started
     */
    startTime: string;
    /**
     * When the maintenance ended (null if not ended yet)
     */
    endTime?: string | null;
    /**
     * The reason for the maintenance
     */
    reason?: string;
};

export type PaginatedMaintenanceResponse = {
    total: number;
    page: number;
    limit: number;
    /**
     * List of maintenances
     */
    data: Array<ResourceMaintenance>;
};

export type UpdateMaintenanceDto = {
    /**
     * When the maintenance starts (must be in the future)
     */
    startTime?: string;
    /**
     * When the maintenance ends (optional)
     */
    endTime?: string | null;
    /**
     * The reason for the maintenance
     */
    reason?: string;
};

export type ResourceFlowNodePositionDto = {
    /**
     * The x position of the node
     */
    x: number;
    /**
     * The y position of the node
     */
    y: number;
};

export type ResourceFlowNodeDto = {
    /**
     * The unique identifier of the resource flow node
     */
    id: string;
    /**
     * The type of the node
     */
    type: 'event.resource.usage.started' | 'event.resource.usage.stopped' | 'event.resource.usage.takeover' | 'action.http.sendRequest' | 'action.mqtt.sendMessage' | 'action.util.wait';
    /**
     * The position of the node
     */
    position: ResourceFlowNodePositionDto;
    /**
     * The data of the node, depending on the type of the node
     */
    data: {
        [key: string]: unknown;
    };
};

/**
 * The type of the node
 */
export enum type2 {
    EVENT_RESOURCE_USAGE_STARTED = 'event.resource.usage.started',
    EVENT_RESOURCE_USAGE_STOPPED = 'event.resource.usage.stopped',
    EVENT_RESOURCE_USAGE_TAKEOVER = 'event.resource.usage.takeover',
    ACTION_HTTP_SEND_REQUEST = 'action.http.sendRequest',
    ACTION_MQTT_SEND_MESSAGE = 'action.mqtt.sendMessage',
    ACTION_UTIL_WAIT = 'action.util.wait'
}

export type ResourceFlowEdgeDto = {
    /**
     * The unique identifier of the resource flow edge
     */
    id: string;
    /**
     * The source node id
     */
    source: string;
    /**
     * The target node id
     */
    target: string;
};

export type ValidationErrorDto = {
    /**
     * The ID of the node that has the validation error
     */
    nodeId: string;
    /**
     * The type of the node that has the validation error
     */
    nodeType: string;
    /**
     * The field that has the validation error
     */
    field: string;
    /**
     * The validation error message
     */
    message: string;
    /**
     * The invalid value that caused the error
     */
    value?: {
        [key: string]: unknown;
    };
};

export type ResourceFlowResponseDto = {
    /**
     * Array of flow nodes defining the workflow steps
     */
    nodes: Array<ResourceFlowNodeDto>;
    /**
     * Array of flow edges connecting nodes to define the workflow flow
     */
    edges: Array<ResourceFlowEdgeDto>;
    /**
     * Validation errors for nodes, if any
     */
    validationErrors?: Array<ValidationErrorDto>;
};

export type ResourceFlowSaveDto = {
    /**
     * Array of flow nodes defining the workflow steps
     */
    nodes: Array<ResourceFlowNodeDto>;
    /**
     * Array of flow edges connecting nodes to define the workflow flow
     */
    edges: Array<ResourceFlowEdgeDto>;
};

export type ResourceFlowLog = {
    /**
     * The unique identifier of the resource flow log
     */
    id: number;
    /**
     * The node id of the node that generated the log
     */
    nodeId: string | null;
    /**
     * The run/execution id of the flow that generated the log
     */
    flowRunId: string;
    /**
     * The type of the log entry
     */
    type: 'flow.start' | 'node.processing.started' | 'node.processing.failed' | 'node.processing.completed' | 'flow.completed';
    /**
     * Optional payload for additional user information
     */
    payload?: string;
    /**
     * When the node was created
     */
    createdAt: string;
    /**
     * The id of the resource that this log belongs to
     */
    resourceId: number;
    /**
     * The resource being this log belongs to
     */
    resource?: Resource;
};

/**
 * The type of the log entry
 */
export enum type3 {
    FLOW_START = 'flow.start',
    NODE_PROCESSING_STARTED = 'node.processing.started',
    NODE_PROCESSING_FAILED = 'node.processing.failed',
    NODE_PROCESSING_COMPLETED = 'node.processing.completed',
    FLOW_COMPLETED = 'flow.completed'
}

export type ResourceFlowLogsResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * Array of flow log entries, ordered by creation time (newest first)
     */
    data: Array<ResourceFlowLog>;
};

export type PluginMainFrontend = {
    /**
     * The directory of the plugins frontend files
     */
    directory: string;
    /**
     * The entry point of the plugin, relative to the frontend directory
     */
    entryPoint: string;
};

export type PluginMainBackend = {
    /**
     * The directory of the plugins backend files
     */
    directory: string;
    /**
     * The entry point of the plugin, relative to the backend directory
     */
    entryPoint: string;
};

export type PluginMain = {
    /**
     * The frontend files of the plugin
     */
    frontend: PluginMainFrontend;
    /**
     * The backend file of the plugin
     */
    backend: PluginMainBackend;
};

export type PluginAttraccessVersion = {
    /**
     * The minimum version of the plugin
     */
    min: string;
    /**
     * The maximum version of the plugin
     */
    max: string;
    /**
     * The exact version of the plugin
     */
    exact: string;
};

export type LoadedPluginManifest = {
    /**
     * The name of the plugin
     */
    name: string;
    main: PluginMain;
    /**
     * The version of the plugin
     */
    version: string;
    attraccessVersion: PluginAttraccessVersion;
    /**
     * The directory of the plugin
     */
    pluginDirectory: string;
    /**
     * The id of the plugin
     */
    id: string;
};

export type UploadPluginDto = {
    /**
     * Plugin zip file
     */
    pluginZip: (Blob | File);
};

export type EnrollNfcCardDto = {
    /**
     * The ID of the reader to enroll the NFC card on
     */
    readerId: number;
};

export type EnrollNfcCardResponseDto = {
    /**
     * Success message
     */
    message: string;
};

export type ResetNfcCardDto = {
    /**
     * The ID of the reader to reset the NFC card on
     */
    readerId: number;
    /**
     * The ID of the NFC card to reset
     */
    cardId: number;
};

export type ResetNfcCardResponseDto = {
    /**
     * Success message
     */
    message: string;
};

export type UpdateReaderDto = {
    /**
     * The name of the reader
     */
    name: string;
    /**
     * The IDs of the resources that the reader has access to
     */
    connectedResourceIds: Array<(number)>;
};

export type AttractapFirmwareVersion = {
    [key: string]: unknown;
};

export type Attractap = {
    /**
     * The ID of the reader
     */
    id: number;
    /**
     * The name of the reader
     */
    name: string;
    /**
     * The resources that the reader has access to
     */
    resources: Array<Resource>;
    /**
     * The last time the reader connected to the server
     */
    lastConnection: string;
    /**
     * The first time the reader connected to the server
     */
    firstConnection: string;
    /**
     * The firmware of the reader
     */
    firmware: AttractapFirmwareVersion;
};

export type UpdateReaderResponseDto = {
    /**
     * Success message
     */
    message: string;
    /**
     * The updated reader
     */
    reader: Attractap;
};

export type AppKeyRequestDto = {
    /**
     * The UID of the card to get the app key for
     */
    cardUID: string;
    /**
     * The key number to generate
     */
    keyNo: number;
};

export type AppKeyResponseDto = {
    /**
     * Generated key in hex format
     */
    key: string;
};

export type NFCCard = {
    /**
     * The ID of the NFC card
     */
    id: number;
    /**
     * The UID of the NFC card
     */
    uid: string;
    /**
     * The ID of the user that owns the NFC card
     */
    user: User;
    /**
     * The date and time the NFC card was created
     */
    createdAt: string;
    /**
     * The date and time the NFC card was last updated
     */
    updatedAt: string;
    /**
     * The date and time the NFC card was last seen
     */
    lastSeen: string;
    /**
     * Whether the NFC card is active
     */
    isActive: boolean;
};

export type NfcCardSetActiveStateDto = {
    [key: string]: unknown;
};

export type AttractapFirmware = {
    /**
     * The name of the firmware
     */
    name: string;
    /**
     * The friendly name of the firmware
     */
    friendlyName: string;
    /**
     * The variant of the firmware
     */
    variant: string;
    /**
     * The variant of the firmware
     */
    variantFriendlyName: string;
    /**
     * The version of the firmware
     */
    version: string;
    /**
     * The board family of the firmware
     */
    boardFamily: string;
    /**
     * The filename of the firmware
     */
    filename: string;
    /**
     * The filename of the firmware for OTA updates (zlib compressed)
     */
    filenameOTA: string;
};

export type InfoResponse = {
    name?: string;
    status?: string;
};

export type CreateOneUserData = {
    requestBody: CreateUserDto;
};

export type CreateOneUserResponse = User;

export type FindManyData = {
    /**
     * User IDs
     */
    ids?: Array<(number)>;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Search query
     */
    search?: string;
};

export type FindManyResponse = PaginatedUsersResponseDto;

export type VerifyEmailData = {
    requestBody: VerifyEmailDto;
};

export type VerifyEmailResponse = {
    message?: string;
};

export type RequestPasswordResetData = {
    requestBody: ResetPasswordDto;
};

export type RequestPasswordResetResponse = unknown;

export type ChangePasswordViaResetTokenData = {
    requestBody: ChangePasswordDto;
    userId: number;
};

export type ChangePasswordViaResetTokenResponse = unknown;

export type GetCurrentResponse = User;

export type ChangeMyUsernameData = {
    requestBody: ChangeUsernameDto;
};

export type ChangeMyUsernameResponse = User;

export type GetOneUserByIdData = {
    id: number;
};

export type GetOneUserByIdResponse = User;

export type UpdatePermissionsData = {
    id: number;
    requestBody: UpdateUserPermissionsDto;
};

export type UpdatePermissionsResponse = User;

export type GetPermissionsData = {
    id: number;
};

export type GetPermissionsResponse = {
    canManageResources?: boolean;
    canManageSystemConfiguration?: boolean;
    canManageUsers?: boolean;
};

export type BulkUpdatePermissionsData = {
    requestBody: BulkUpdateUserPermissionsDto;
};

export type BulkUpdatePermissionsResponse = Array<User>;

export type GetAllWithPermissionData = {
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Filter users by permission
     */
    permission?: 'canManageResources' | 'canManageSystemConfiguration' | 'canManageUsers';
};

export type GetAllWithPermissionResponse = PaginatedUsersResponseDto;

export type SetUserPasswordData = {
    id: number;
    requestBody: SetUserPasswordDto;
};

export type SetUserPasswordResponse = {
    message?: string;
};

export type ChangeUserUsernameData = {
    id: number;
    requestBody: ChangeUsernameDto;
};

export type ChangeUserUsernameResponse = User;

export type CreateSessionData = {
    requestBody: {
        username?: string;
        password?: string;
        tokenLocation?: 'cookie' | 'body';
    };
};

export type CreateSessionResponse2 = CreateSessionResponse;

export type RefreshSessionData = {
    tokenLocation: string;
};

export type RefreshSessionResponse = CreateSessionResponse;

export type EndSessionResponse = {
    [key: string]: unknown;
};

export type GetAllSsoProvidersResponse = Array<SSOProvider>;

export type CreateOneSsoProviderData = {
    requestBody: CreateSSOProviderDto;
};

export type CreateOneSsoProviderResponse = SSOProvider;

export type LinkUserToExternalAccountData = {
    requestBody: LinkUserToExternalAccountRequestDto;
};

export type LinkUserToExternalAccountResponse = {
    /**
     * Whether the account has been linked to the external identifier
     */
    OK?: boolean;
};

export type GetOneSsoProviderByIdData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
};

export type GetOneSsoProviderByIdResponse = SSOProvider;

export type UpdateOneSsoProviderData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
    requestBody: UpdateSSOProviderDto;
};

export type UpdateOneSsoProviderResponse = SSOProvider;

export type DeleteOneSsoProviderData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
};

export type DeleteOneSsoProviderResponse = unknown;

export type DiscoverAuthentikOidcData = {
    /**
     * Authentik application slug
     */
    applicationName: string;
    /**
     * Authentik host, e.g. http://localhost:9000
     */
    host: string;
};

export type DiscoverAuthentikOidcResponse = unknown;

export type DiscoverKeycloakOidcData = {
    /**
     * Keycloak host, e.g. http://localhost:8080
     */
    host: string;
    /**
     * Keycloak realm name
     */
    realm: string;
};

export type DiscoverKeycloakOidcResponse = unknown;

export type LoginWithOidcData = {
    /**
     * The ID of the SSO provider
     */
    providerId: string;
    /**
     * The URL to redirect to after login (optional), if you intend to redirect to your frontned, your frontend should pass the query parameters back to the sso callback endpoint to retreive a JWT token for furhter authentication
     */
    redirectTo?: unknown;
};

export type LoginWithOidcResponse = unknown;

export type OidcLoginCallbackData = {
    code: unknown;
    iss: unknown;
    /**
     * The ID of the SSO provider
     */
    providerId: string;
    redirectTo: string;
    sessionState: unknown;
    state: unknown;
};

export type OidcLoginCallbackResponse = CreateSessionResponse;

export type EmailTemplateControllerPreviewMjmlData = {
    requestBody: PreviewMjmlDto;
};

export type EmailTemplateControllerPreviewMjmlResponse = PreviewMjmlResponseDto;

export type EmailTemplateControllerFindAllResponse = Array<EmailTemplate>;

export type EmailTemplateControllerFindOneData = {
    /**
     * Template type/type
     */
    type: 'verify-email' | 'reset-password' | 'username-changed' | 'password-changed';
};

export type EmailTemplateControllerFindOneResponse = EmailTemplate;

export type EmailTemplateControllerUpdateData = {
    requestBody: UpdateEmailTemplateDto;
    /**
     * Template type/type
     */
    type: 'verify-email' | 'reset-password' | 'username-changed' | 'password-changed';
};

export type EmailTemplateControllerUpdateResponse = EmailTemplate;

export type GetLicenseInformationResponse = LicenseDataDto;

export type CreateOneResourceData = {
    formData: CreateResourceDto;
};

export type CreateOneResourceResponse = Resource;

export type GetAllResourcesData = {
    /**
     * Group ID to filter resources. Send -1 to find ungrouped resources.
     */
    groupId?: number;
    /**
     * Resource IDs to filter resources
     */
    ids?: Array<(number)>;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Only resources in use by me
     */
    onlyInUseByMe?: boolean;
    /**
     * Only resources with permissions
     */
    onlyWithPermissions?: boolean;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Search term to filter resources
     */
    search?: string;
};

export type GetAllResourcesResponse = PaginatedResourceResponseDto;

export type GetAllResourcesInUseResponse = Array<Resource>;

export type GetOneResourceByIdData = {
    id: number;
};

export type GetOneResourceByIdResponse = Resource;

export type UpdateOneResourceData = {
    formData: UpdateResourceDto;
    id: number;
};

export type UpdateOneResourceResponse = Resource;

export type DeleteOneResourceData = {
    id: number;
};

export type DeleteOneResourceResponse = void;

export type SseControllerStreamEventsData = {
    resourceId: number;
};

export type SseControllerStreamEventsResponse = unknown;

export type ResourceGroupsCreateOneData = {
    requestBody: CreateResourceGroupDto;
};

export type ResourceGroupsCreateOneResponse = ResourceGroup;

export type ResourceGroupsGetManyResponse = Array<ResourceGroup>;

export type ResourceGroupsGetOneData = {
    /**
     * The ID of the resource group
     */
    id: number;
};

export type ResourceGroupsGetOneResponse = ResourceGroup;

export type ResourceGroupsUpdateOneData = {
    /**
     * The ID of the resource group
     */
    id: number;
    requestBody: UpdateResourceGroupDto;
};

export type ResourceGroupsUpdateOneResponse = ResourceGroup;

export type ResourceGroupsAddResourceData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type ResourceGroupsAddResourceResponse = unknown;

export type ResourceGroupsRemoveResourceData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type ResourceGroupsRemoveResourceResponse = unknown;

export type ResourceGroupsDeleteOneData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
};

export type ResourceGroupsDeleteOneResponse = unknown;

export type ResourceUsageStartSessionData = {
    requestBody: StartUsageSessionDto;
    resourceId: number;
};

export type ResourceUsageStartSessionResponse = ResourceUsage;

export type ResourceUsageEndSessionData = {
    requestBody: EndUsageSessionDto;
    resourceId: number;
};

export type ResourceUsageEndSessionResponse = ResourceUsage;

export type ResourceUsageGetHistoryData = {
    /**
     * The number of items per page
     */
    limit?: number;
    /**
     * The page number to retrieve
     */
    page?: number;
    resourceId: number;
    /**
     * The user ID to filter by
     */
    userId?: number;
};

export type ResourceUsageGetHistoryResponse = GetResourceHistoryResponseDto;

export type ResourceUsageGetActiveSessionData = {
    resourceId: number;
};

export type ResourceUsageGetActiveSessionResponse = GetActiveUsageSessionDto;

export type ResourceUsageCanControlData = {
    resourceId: number;
};

export type ResourceUsageCanControlResponse = CanControlResponseDto;

export type MqttServersGetAllResponse = Array<MqttServer>;

export type MqttServersCreateOneData = {
    requestBody: CreateMqttServerDto;
};

export type MqttServersCreateOneResponse = MqttServer;

export type MqttServersGetOneByIdData = {
    id: number;
};

export type MqttServersGetOneByIdResponse = MqttServer;

export type MqttServersUpdateOneData = {
    id: number;
    requestBody: UpdateMqttServerDto;
};

export type MqttServersUpdateOneResponse = MqttServer;

export type MqttServersDeleteOneData = {
    id: number;
};

export type MqttServersDeleteOneResponse = unknown;

export type MqttServersTestConnectionData = {
    id: number;
};

export type MqttServersTestConnectionResponse = TestConnectionResponseDto;

export type MqttServersGetStatusOfOneData = {
    id: number;
};

export type MqttServersGetStatusOfOneResponse = MqttServerStatusDto;

export type MqttServersGetStatusOfAllResponse = AllMqttServerStatusesDto;

export type ResourceGroupIntroductionsGetManyData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
};

export type ResourceGroupIntroductionsGetManyResponse = Array<ResourceIntroduction>;

export type ResourceGroupIntroductionsGetHistoryData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroductionsGetHistoryResponse = Array<ResourceIntroductionHistoryItem>;

export type ResourceGroupIntroductionsGrantData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    requestBody: UpdateResourceGroupIntroductionDto;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroductionsGrantResponse = ResourceIntroductionHistoryItem;

export type ResourceGroupIntroductionsRevokeData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    requestBody: UpdateResourceGroupIntroductionDto;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroductionsRevokeResponse = ResourceIntroductionHistoryItem;

export type ResourceGroupIntroducersGetManyData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
};

export type ResourceGroupIntroducersGetManyResponse = Array<ResourceIntroducer>;

export type ResourceGroupIntroducersIsIntroducerData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroducersIsIntroducerResponse = IsResourceGroupIntroducerResponseDto;

export type ResourceGroupIntroducersGrantData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroducersGrantResponse = unknown;

export type ResourceGroupIntroducersRevokeData = {
    /**
     * The ID of the resource group
     */
    groupId: number;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceGroupIntroducersRevokeResponse = unknown;

export type ResourceIntroducersIsIntroducerData = {
    resourceId: number;
    userId: number;
};

export type ResourceIntroducersIsIntroducerResponse = IsResourceIntroducerResponseDto;

export type ResourceIntroducersGetManyData = {
    resourceId: number;
};

export type ResourceIntroducersGetManyResponse = Array<ResourceIntroducer>;

export type ResourceIntroducersGrantData = {
    resourceId: number;
    userId: number;
};

export type ResourceIntroducersGrantResponse = ResourceIntroducer;

export type ResourceIntroducersRevokeData = {
    resourceId: number;
    userId: number;
};

export type ResourceIntroducersRevokeResponse = unknown;

export type ResourceIntroductionsGetManyData = {
    resourceId: number;
};

export type ResourceIntroductionsGetManyResponse = Array<ResourceIntroduction>;

export type ResourceIntroductionsGrantData = {
    requestBody: UpdateResourceIntroductionDto;
    resourceId: number;
    userId: number;
};

export type ResourceIntroductionsGrantResponse = ResourceIntroductionHistoryItem;

export type ResourceIntroductionsRevokeData = {
    requestBody: UpdateResourceIntroductionDto;
    resourceId: number;
    userId: number;
};

export type ResourceIntroductionsRevokeResponse = ResourceIntroductionHistoryItem;

export type ResourceIntroductionsGetHistoryData = {
    /**
     * The ID of the resource
     */
    resourceId: number;
    /**
     * The ID of the user
     */
    userId: number;
};

export type ResourceIntroductionsGetHistoryResponse = Array<ResourceIntroductionHistoryItem>;

export type CanManageMaintenanceData = {
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type CanManageMaintenanceResponse = CanManageMaintenanceResponseDto;

export type CreateMaintenanceData = {
    requestBody: CreateMaintenanceDto;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type CreateMaintenanceResponse = ResourceMaintenance;

export type FindMaintenancesData = {
    /**
     * Include active maintenances (currently ongoing)
     */
    includeActive?: boolean;
    /**
     * Include past maintenances (already finished)
     */
    includePast?: boolean;
    /**
     * Include upcoming maintenances (start time in the future)
     */
    includeUpcoming?: boolean;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number for pagination
     */
    page?: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type FindMaintenancesResponse = PaginatedMaintenanceResponse;

export type GetMaintenanceData = {
    /**
     * The ID of the maintenance
     */
    maintenanceId: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type GetMaintenanceResponse = ResourceMaintenance;

export type UpdateMaintenanceData = {
    /**
     * The ID of the maintenance
     */
    maintenanceId: number;
    requestBody: UpdateMaintenanceDto;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type UpdateMaintenanceResponse = ResourceMaintenance;

export type CancelMaintenanceData = {
    /**
     * The ID of the maintenance
     */
    maintenanceId: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
};

export type CancelMaintenanceResponse = void;

export type GetResourceFlowData = {
    /**
     * The ID of the resource to get the flow for
     */
    resourceId: number;
};

export type GetResourceFlowResponse = ResourceFlowResponseDto;

export type SaveResourceFlowData = {
    requestBody: ResourceFlowSaveDto;
    /**
     * The ID of the resource to save the flow for
     */
    resourceId: number;
};

export type SaveResourceFlowResponse = ResourceFlowResponseDto;

export type GetResourceFlowLogsData = {
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * The ID of the resource to get the flow logs for
     */
    resourceId: number;
};

export type GetResourceFlowLogsResponse = ResourceFlowLogsResponseDto;

export type ResourceFlowsControllerStreamEventsData = {
    resourceId: number;
};

export type ResourceFlowsControllerStreamEventsResponse = unknown;

export type GetPluginsResponse = Array<LoadedPluginManifest>;

export type UploadPluginData = {
    formData: UploadPluginDto;
};

export type GetFrontendPluginFileData = {
    filePath: string;
    pluginName: string;
};

export type GetFrontendPluginFileResponse = string;

export type DeletePluginData = {
    pluginId: string;
};

export type DeletePluginResponse = unknown;

export type EnrollNfcCardData = {
    requestBody: EnrollNfcCardDto;
};

export type EnrollNfcCardResponse = EnrollNfcCardResponseDto;

export type ResetNfcCardData = {
    requestBody: ResetNfcCardDto;
};

export type ResetNfcCardResponse = ResetNfcCardResponseDto;

export type UpdateReaderData = {
    /**
     * The ID of the reader to update
     */
    readerId: number;
    requestBody: UpdateReaderDto;
};

export type UpdateReaderResponse = UpdateReaderResponseDto;

export type GetReaderByIdData = {
    /**
     * The ID of the reader to get
     */
    readerId: number;
};

export type GetReaderByIdResponse = Attractap;

export type GetReadersResponse = Array<Attractap>;

export type GetAppKeyByUidData = {
    requestBody: AppKeyRequestDto;
};

export type GetAppKeyByUidResponse = AppKeyResponseDto;

export type GetAllCardsResponse = Array<NFCCard>;

export type ToggleCardActiveData = {
    id: number;
    requestBody: NfcCardSetActiveStateDto;
};

export type ToggleCardActiveResponse = NFCCard;

export type GetFirmwaresResponse = Array<AttractapFirmware>;

export type GetFirmwareBinaryData = {
    filename: string;
    firmwareName: string;
    variantName: string;
};

export type GetFirmwareBinaryResponse = string;

export type AnalyticsControllerGetResourceUsageHoursInDateRangeData = {
    /**
     * The end date of the range
     */
    end: string;
    /**
     * The start date of the range
     */
    start: string;
};

export type AnalyticsControllerGetResourceUsageHoursInDateRangeResponse = Array<ResourceUsage>;

export type $OpenApiTs = {
    '/api/info': {
        get: {
            res: {
                /**
                 * API information
                 */
                200: {
                    name?: string;
                    status?: string;
                };
            };
        };
    };
    '/api/users': {
        post: {
            req: CreateOneUserData;
            res: {
                /**
                 * The user has been successfully created.
                 */
                201: User;
                /**
                 * Invalid input data.
                 */
                400: unknown;
            };
        };
        get: {
            req: FindManyData;
            res: {
                /**
                 * List of users.
                 */
                200: PaginatedUsersResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/users/verify-email': {
        post: {
            req: VerifyEmailData;
            res: {
                /**
                 * Email verified successfully.
                 */
                200: {
                    message?: string;
                };
                /**
                 * Invalid token or email.
                 */
                400: unknown;
            };
        };
    };
    '/api/users/reset-password': {
        post: {
            req: RequestPasswordResetData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Invalid input data.
                 */
                400: unknown;
            };
        };
    };
    '/api/users/{userId}/change-password-by-token': {
        post: {
            req: ChangePasswordViaResetTokenData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Invalid input data.
                 */
                400: unknown;
            };
        };
    };
    '/api/users/me': {
        get: {
            res: {
                /**
                 * The current user.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/users/me/username': {
        patch: {
            req: ChangeMyUsernameData;
            res: {
                /**
                 * Username changed.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/users/{id}': {
        get: {
            req: GetOneUserByIdData;
            res: {
                /**
                 * The user with the specified ID.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to access this resource.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: UserNotFoundException;
            };
        };
    };
    '/api/users/{id}/permissions': {
        patch: {
            req: UpdatePermissionsData;
            res: {
                /**
                 * The user permissions have been successfully updated.
                 */
                200: User;
                /**
                 * Invalid input data.
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
            };
        };
        get: {
            req: GetPermissionsData;
            res: {
                /**
                 * The user's permissions.
                 */
                200: {
                    canManageResources?: boolean;
                    canManageSystemConfiguration?: boolean;
                    canManageUsers?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
            };
        };
    };
    '/api/users/permissions': {
        post: {
            req: BulkUpdatePermissionsData;
            res: {
                /**
                 * The user permissions have been successfully updated.
                 */
                200: Array<User>;
                /**
                 * Invalid input data.
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/users/with-permission': {
        get: {
            req: GetAllWithPermissionData;
            res: {
                /**
                 * List of users with the specified permission.
                 */
                200: PaginatedUsersResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/users/{id}/password': {
        post: {
            req: SetUserPasswordData;
            res: {
                /**
                 * The password has been successfully updated.
                 */
                200: {
                    message?: string;
                };
                /**
                 * Invalid input data.
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
            };
        };
    };
    '/api/users/{id}/username': {
        patch: {
            req: ChangeUserUsernameData;
            res: {
                /**
                 * Username changed.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/session/local': {
        post: {
            req: CreateSessionData;
            res: {
                /**
                 * The session has been created
                 */
                200: CreateSessionResponse;
                /**
                 * Unauthorized - Invalid credentials
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/session/refresh': {
        get: {
            req: RefreshSessionData;
            res: {
                /**
                 * The session has been refreshed
                 */
                200: CreateSessionResponse;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/session': {
        delete: {
            res: {
                /**
                 * The session has been deleted
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/sso/providers': {
        get: {
            res: {
                /**
                 * The list of SSO providers
                 */
                200: Array<SSOProvider>;
            };
        };
        post: {
            req: CreateOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been created
                 */
                201: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
            };
        };
    };
    '/api/auth/sso/link-account': {
        post: {
            req: LinkUserToExternalAccountData;
            res: {
                /**
                 * The account has been linked to the external identifier
                 */
                200: {
                    /**
                     * Whether the account has been linked to the external identifier
                     */
                    OK?: boolean;
                };
            };
        };
    };
    '/api/auth/sso/providers/{id}': {
        get: {
            req: GetOneSsoProviderByIdData;
            res: {
                /**
                 * The SSO provider with full configuration
                 */
                200: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been updated
                 */
                200: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been deleted
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
    };
    '/api/auth/sso/discovery/authentik': {
        get: {
            req: DiscoverAuthentikOidcData;
            res: {
                /**
                 * OIDC configuration JSON
                 */
                200: unknown;
                /**
                 * Invalid host or applicationName
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/sso/discovery/keycloak': {
        get: {
            req: DiscoverKeycloakOidcData;
            res: {
                /**
                 * OIDC configuration JSON
                 */
                200: unknown;
                /**
                 * Invalid host or realm
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/sso/OIDC/{providerId}/login': {
        get: {
            req: LoginWithOidcData;
            res: {
                /**
                 * The user has been logged in
                 */
                200: unknown;
            };
        };
    };
    '/api/auth/sso/OIDC/{providerId}/callback': {
        get: {
            req: OidcLoginCallbackData;
            res: {
                /**
                 * The user has been logged in
                 */
                200: CreateSessionResponse;
            };
        };
    };
    '/api/email-templates/preview-mjml': {
        post: {
            req: EmailTemplateControllerPreviewMjmlData;
            res: {
                /**
                 * MJML preview result
                 */
                200: PreviewMjmlResponseDto;
                /**
                 * Invalid MJML content
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/email-templates': {
        get: {
            res: {
                /**
                 * List of email templates
                 */
                200: Array<EmailTemplate>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/email-templates/{type}': {
        get: {
            req: EmailTemplateControllerFindOneData;
            res: {
                /**
                 * Email template found
                 */
                200: EmailTemplate;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Template not found
                 */
                404: unknown;
            };
        };
        patch: {
            req: EmailTemplateControllerUpdateData;
            res: {
                /**
                 * Template updated successfully
                 */
                200: EmailTemplate;
                /**
                 * Invalid input data
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Template not found
                 */
                404: unknown;
            };
        };
    };
    '/api/license-data': {
        get: {
            res: {
                /**
                 * The current license data.
                 */
                200: LicenseDataDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources': {
        post: {
            req: CreateOneResourceData;
            res: {
                /**
                 * The resource has been successfully created.
                 */
                201: Resource;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        get: {
            req: GetAllResourcesData;
            res: {
                /**
                 * List of resources with pagination.
                 */
                200: PaginatedResourceResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/in-use': {
        get: {
            res: {
                /**
                 * List of resources in use.
                 */
                200: Array<Resource>;
            };
        };
    };
    '/api/resources/{id}': {
        get: {
            req: GetOneResourceByIdData;
            res: {
                /**
                 * The found resource.
                 */
                200: Resource;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneResourceData;
            res: {
                /**
                 * The resource has been successfully updated.
                 */
                200: Resource;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        delete: {
            req: DeleteOneResourceData;
            res: {
                /**
                 * The resource has been successfully deleted.
                 */
                204: void;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/events': {
        get: {
            req: SseControllerStreamEventsData;
            res: {
                200: unknown;
            };
        };
    };
    '/api/resource-groups': {
        post: {
            req: ResourceGroupsCreateOneData;
            res: {
                /**
                 * The resource group has been successfully created.
                 */
                201: ResourceGroup;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        get: {
            res: {
                /**
                 * The resource groups have been successfully retrieved.
                 */
                200: Array<ResourceGroup>;
            };
        };
    };
    '/api/resource-groups/{id}': {
        get: {
            req: ResourceGroupsGetOneData;
            res: {
                /**
                 * The resource group has been successfully retrieved.
                 */
                200: ResourceGroup;
                /**
                 * The resource group has not been found.
                 */
                404: unknown;
            };
        };
        put: {
            req: ResourceGroupsUpdateOneData;
            res: {
                /**
                 * The resource group has been successfully updated.
                 */
                200: ResourceGroup;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * The resource group has not been found.
                 */
                404: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/resources/{resourceId}': {
        post: {
            req: ResourceGroupsAddResourceData;
            res: {
                /**
                 * The resource has been successfully added to the resource group.
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        delete: {
            req: ResourceGroupsRemoveResourceData;
            res: {
                /**
                 * The resource has been successfully removed from the resource group.
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}': {
        delete: {
            req: ResourceGroupsDeleteOneData;
            res: {
                /**
                 * The resource group has been successfully deleted.
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/start': {
        post: {
            req: ResourceUsageStartSessionData;
            res: {
                /**
                 * Usage session started successfully.
                 */
                201: ResourceUsage;
                /**
                 * Bad Request - Invalid input data
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/end': {
        put: {
            req: ResourceUsageEndSessionData;
            res: {
                /**
                 * Usage session ended successfully.
                 */
                200: ResourceUsage;
                /**
                 * Bad Request - Invalid input data or no active session
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource or session not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/history': {
        get: {
            req: ResourceUsageGetHistoryData;
            res: {
                /**
                 * Resource usage history retrieved successfully.
                 */
                200: GetResourceHistoryResponseDto;
                /**
                 * Bad Request - Invalid pagination parameters
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/active': {
        get: {
            req: ResourceUsageGetActiveSessionData;
            res: {
                /**
                 * Active session retrieved successfully.
                 */
                200: GetActiveUsageSessionDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/can-control': {
        get: {
            req: ResourceUsageCanControlData;
            res: {
                /**
                 * User can control resource
                 */
                200: CanControlResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/mqtt/servers': {
        get: {
            res: {
                /**
                 * Returns all MQTT servers
                 */
                200: Array<MqttServer>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        post: {
            req: MqttServersCreateOneData;
            res: {
                /**
                 * MQTT server created successfully
                 */
                201: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}': {
        get: {
            req: MqttServersGetOneByIdData;
            res: {
                /**
                 * Returns the MQTT server with the specified ID
                 */
                200: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
        put: {
            req: MqttServersUpdateOneData;
            res: {
                /**
                 * MQTT server updated successfully
                 */
                200: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: MqttServersDeleteOneData;
            res: {
                /**
                 * MQTT server deleted successfully
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}/test': {
        post: {
            req: MqttServersTestConnectionData;
            res: {
                /**
                 * Connection test result
                 */
                200: TestConnectionResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}/status': {
        get: {
            req: MqttServersGetStatusOfOneData;
            res: {
                /**
                 * MQTT server connection status and statistics
                 */
                200: MqttServerStatusDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/status': {
        get: {
            res: {
                /**
                 * All MQTT server connection statuses and statistics
                 */
                200: AllMqttServerStatusesDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions': {
        get: {
            req: ResourceGroupIntroductionsGetManyData;
            res: {
                /**
                 * The introductions have been successfully retrieved.
                 */
                200: Array<ResourceIntroduction>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource group
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{userId}/history': {
        get: {
            req: ResourceGroupIntroductionsGetHistoryData;
            res: {
                /**
                 * The history has been successfully retrieved.
                 */
                200: Array<ResourceIntroductionHistoryItem>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource group
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{userId}/grant': {
        post: {
            req: ResourceGroupIntroductionsGrantData;
            res: {
                /**
                 * The introduction has been successfully granted.
                 */
                200: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource group
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{userId}/revoke': {
        post: {
            req: ResourceGroupIntroductionsRevokeData;
            res: {
                /**
                 * The introduction has been successfully revoked.
                 */
                200: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource group
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers': {
        get: {
            req: ResourceGroupIntroducersGetManyData;
            res: {
                /**
                 * The introducers have been successfully retrieved.
                 */
                200: Array<ResourceIntroducer>;
                /**
                 * The resource group has not been found.
                 */
                404: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers/{userId}/is-introducer': {
        get: {
            req: ResourceGroupIntroducersIsIntroducerData;
            res: {
                /**
                 * The user is an introducer for the resource group.
                 */
                200: IsResourceGroupIntroducerResponseDto;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers/{userId}/grant': {
        post: {
            req: ResourceGroupIntroducersGrantData;
            res: {
                /**
                 * The introducer has been successfully granted.
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers/{userId}/revoke': {
        post: {
            req: ResourceGroupIntroducersRevokeData;
            res: {
                /**
                 * The introducer has been successfully revoked.
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introducers/{userId}/is-introducer': {
        get: {
            req: ResourceIntroducersIsIntroducerData;
            res: {
                /**
                 * User is an introducer for the resource
                 */
                200: IsResourceIntroducerResponseDto;
            };
        };
    };
    '/api/resources/{resourceId}/introducers': {
        get: {
            req: ResourceIntroducersGetManyData;
            res: {
                /**
                 * All introducers for a resource
                 */
                200: Array<ResourceIntroducer>;
            };
        };
    };
    '/api/resources/{resourceId}/introducers/{userId}/grant': {
        post: {
            req: ResourceIntroducersGrantData;
            res: {
                /**
                 * Introduction permissions granted
                 */
                200: ResourceIntroducer;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introducers/{userId}/revoke': {
        delete: {
            req: ResourceIntroducersRevokeData;
            res: {
                /**
                 * Introduction permissions revoked
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions': {
        get: {
            req: ResourceIntroductionsGetManyData;
            res: {
                /**
                 * All introductions for a resource
                 */
                200: Array<ResourceIntroduction>;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{userId}/grant': {
        post: {
            req: ResourceIntroductionsGrantData;
            res: {
                /**
                 * Introduction granted
                 */
                200: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{userId}/revoke': {
        delete: {
            req: ResourceIntroductionsRevokeData;
            res: {
                /**
                 * Introduction revoked
                 */
                200: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{userId}/history': {
        get: {
            req: ResourceIntroductionsGetHistoryData;
            res: {
                /**
                 * The history has been successfully retrieved.
                 */
                200: Array<ResourceIntroductionHistoryItem>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to introduce users to this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/maintenances/can-manage': {
        get: {
            req: CanManageMaintenanceData;
            res: {
                /**
                 * Permission check completed successfully
                 */
                200: CanManageMaintenanceResponseDto;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/maintenances': {
        post: {
            req: CreateMaintenanceData;
            res: {
                /**
                 * Maintenance created successfully
                 */
                201: ResourceMaintenance;
                /**
                 * Bad request - invalid maintenance data
                 */
                400: unknown;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage maintenances for this resource
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
        get: {
            req: FindMaintenancesData;
            res: {
                /**
                 * Maintenances retrieved successfully
                 */
                200: PaginatedMaintenanceResponse;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/maintenances/{maintenanceId}': {
        get: {
            req: GetMaintenanceData;
            res: {
                /**
                 * Maintenance retrieved successfully
                 */
                200: ResourceMaintenance;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Maintenance not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateMaintenanceData;
            res: {
                /**
                 * Maintenance updated successfully
                 */
                200: ResourceMaintenance;
                /**
                 * Bad request - invalid maintenance data
                 */
                400: unknown;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage maintenances for this resource
                 */
                403: unknown;
                /**
                 * Maintenance not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: CancelMaintenanceData;
            res: {
                /**
                 * Maintenance cancelled successfully
                 */
                204: void;
                /**
                 * Unauthorized - User is not authenticated
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage maintenances for this resource
                 */
                403: unknown;
                /**
                 * Maintenance not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/flow': {
        get: {
            req: GetResourceFlowData;
            res: {
                /**
                 * Resource flow retrieved successfully
                 */
                200: ResourceFlowResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Insufficient permissions to manage resources
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: {
                    message?: string;
                    statusCode?: number;
                };
            };
        };
        put: {
            req: SaveResourceFlowData;
            res: {
                /**
                 * Resource flow saved successfully. May include validation errors for individual nodes that have invalid configuration.
                 */
                200: ResourceFlowResponseDto;
                /**
                 * Invalid request data
                 */
                400: {
                    message?: Array<(string)>;
                    statusCode?: number;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Insufficient permissions to manage resources
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: {
                    message?: string;
                    statusCode?: number;
                };
            };
        };
    };
    '/api/resources/{resourceId}/flow/logs': {
        get: {
            req: GetResourceFlowLogsData;
            res: {
                /**
                 * Resource flow logs retrieved successfully
                 */
                200: ResourceFlowLogsResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Insufficient permissions to manage resources
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: {
                    message?: string;
                    statusCode?: number;
                };
            };
        };
    };
    '/api/resources/{resourceId}/flow/logs/live': {
        get: {
            req: ResourceFlowsControllerStreamEventsData;
            res: {
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/plugins': {
        get: {
            res: {
                /**
                 * The list of all plugins
                 */
                200: Array<LoadedPluginManifest>;
            };
        };
        post: {
            req: UploadPluginData;
            res: {
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/plugins/{pluginName}/frontend/module-federation/{filePath}': {
        get: {
            req: GetFrontendPluginFileData;
            res: {
                /**
                 * The requested frontend plugin file
                 */
                200: string;
            };
        };
    };
    '/api/plugins/{pluginId}': {
        delete: {
            req: DeletePluginData;
            res: {
                /**
                 * The plugin has been deleted
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/readers/enroll-nfc-card': {
        post: {
            req: EnrollNfcCardData;
            res: {
                /**
                 * Enrollment initiated, continue on Reader
                 */
                200: EnrollNfcCardResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/readers/reset-nfc-card': {
        post: {
            req: ResetNfcCardData;
            res: {
                /**
                 * Reset initiated, continue on Reader
                 */
                200: ResetNfcCardResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/readers/{readerId}': {
        patch: {
            req: UpdateReaderData;
            res: {
                /**
                 * Reader updated successfully
                 */
                200: UpdateReaderResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Reader not found
                 */
                404: unknown;
            };
        };
        get: {
            req: GetReaderByIdData;
            res: {
                /**
                 * The reader
                 */
                200: Attractap;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Reader not found
                 */
                404: unknown;
            };
        };
    };
    '/api/attractap/readers': {
        get: {
            res: {
                /**
                 * The list of readers
                 */
                200: Array<Attractap>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/cards/keys': {
        post: {
            req: GetAppKeyByUidData;
            res: {
                /**
                 * The app key for the card
                 */
                200: AppKeyResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/cards': {
        get: {
            res: {
                /**
                 * The list of all cards
                 */
                200: Array<NFCCard>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/cards/{id}/active': {
        patch: {
            req: ToggleCardActiveData;
            res: {
                /**
                 * The updated NFC card
                 */
                200: NFCCard;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/firmwares': {
        get: {
            res: {
                /**
                 * Firmwares fetched successfully
                 */
                200: Array<AttractapFirmware>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/attractap/firmwares/{firmwareName}/variants/{variantName}/{filename}': {
        get: {
            req: GetFirmwareBinaryData;
            res: {
                /**
                 * Firmware fetched successfully
                 */
                200: string;
            };
        };
    };
    '/api/analytics/resource-usage-hours': {
        get: {
            req: AnalyticsControllerGetResourceUsageHoursInDateRangeData;
            res: {
                /**
                 * The resource usage hours in the date range
                 */
                200: Array<ResourceUsage>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
};