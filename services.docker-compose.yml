services:
  mailpit:
    image: axllent/mailpit:latest
    ports:
      - '8025:8025'
      - '1025:1025'

  bunkerm:
    image: bunkeriot/bunkerm:latest
    restart: unless-stopped
    ports:
      - '1883:1883' # MQTT broker port
      - '9001:9001' # WebSocket port (if needed)
      - '2000:2000' # Web UI
      - '1900:1900' # Internal admin API
    volumes:
      - bunkerm:/bunkerm/data # persistent data storage

  webhook-site:
    image: tarampampam/webhook-tester:latest
    environment:
      - STORAGE_DRIVER=fs
      - FS_STORAGE_DIR=/storage
    ports:
      - '8084:8080'
    volumes:
      - webhook-site:/storage

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=dev-file
    ports:
      - '8090:8080'
    volumes:
      - keycloak:/opt/keycloak/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health/ready']
      interval: 10s
      timeout: 5s
      retries: 3

  authentik-postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_PG_PASS:?database password required}
      POSTGRES_USER: ${AUTHENTIK_PG_USER:-authentik}
      POSTGRES_DB: ${AUTHENTIK_PG_DB:-authentik}
    env_file:
      - .env

  authentik-redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik-redis:/data

  authentik-server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
    env_file:
      - .env
    ports:
      - '${AUTHENTIK_COMPOSE_PORT_HTTP:-9000}:9000'
      - '${AUTHENTIK_COMPOSE_PORT_HTTPS:-9443}:9443'
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik-media:/media
      - authentik-certs:/certs
      - authentik-templates:/templates
    env_file:
      - .env
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

volumes:
  authentik-database:
    driver: local
  authentik-redis:
    driver: local
  bunkerm:
    driver: local
  authentik-media:
    driver: local
  authentik-templates:
    driver: local
  authentik-certs:
    driver: local
  keycloak:
    driver: local
  webhook-site:
    driver: local
